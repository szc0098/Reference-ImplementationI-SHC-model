package useCases;

import generatedArtifacts.Design;
import generatedArtifacts.Coherence;
import generatedArtifacts.Coherence.CoherenceType;
import generatedArtifacts.Condition;
import generatedArtifacts.DependentVariables;
import generatedArtifacts.Event;
import generatedArtifacts.Events;
import generatedArtifacts.Evidences;
import generatedArtifacts.Experiment;
import generatedArtifacts.Factor;
import generatedArtifacts.FactorLevels;
import generatedArtifacts.Goals;
import generatedArtifacts.GuardCondition;
import generatedArtifacts.Hypothesis;
import generatedArtifacts.IndependentVariables;
import generatedArtifacts.LinkOperators;
import generatedArtifacts.Mechanism;
import generatedArtifacts.MechanisticHypothesis;
import generatedArtifacts.ModelSection;
import generatedArtifacts.OtherAgent;
import generatedArtifacts.PerformanceMeasure;
import generatedArtifacts.Properties;
import generatedArtifacts.Query;
import generatedArtifacts.Reaction;
import generatedArtifacts.Response;
import generatedArtifacts.SpecPattern;
import generatedArtifacts.Values;
import generatedArtifacts.Variables;


public class usecase1 {
	public static void main(String[] args)
	{
		Factor f1[] = new Factor[100];
		Properties []p1 = new Properties[100];
		p1[0] = new Properties();
		p1[0].setParameterName("tag");
		p1[0].setParameterValue("LPS");
		p1[1] = new Properties();
		p1[1].setParameterName("bolusRatio");
		p1[1].setParameterValue("1.0");
		p1[2] = new Properties();
		p1[2].setParameterName("pExitMedia");
		p1[2].setParameterValue("0.1");
		p1[3] = new Properties();
		p1[3].setParameterName("Bindable");
		p1[3].setParameterValue("true");
		p1[4] = new Properties();
		p1[4].setParameterName("pExitCell");
		p1[4].setParameterValue("1.0");
		p1[5] = new Properties();
		p1[5].setParameterName("bindProb");
		p1[5].setParameterValue("0.25");
		p1[6] = new Properties();
		p1[6].setParameterName("bindCycles");
		p1[6].setParameterValue("1.0");
		p1[7] = new Properties();
		p1[7].setParameterName("numProps");
		p1[7].setParameterValue("8");
		p1[8] = new Properties();
		p1[8].setParameterName("membraneCrossing");
		p1[8].setParameterValue("true");
		p1[9] = new Properties();
		p1[9].setParameterName("bileRatio");
		p1[9].setParameterValue("0.5");
		p1[10] = new Properties();
		p1[10].setParameterName("core2Rim");
		p1[10].setParameterValue("0.50");
		p1[11] = new Properties();
		p1[11].setParameterName("metProbStart");
		p1[11].setParameterValue("0.3");
		p1[12] = new Properties();
		p1[12].setParameterName("metProbFinish");
		p1[12].setParameterValue("0.3");
		p1[13] = new Properties();
		p1[13].setParameterName("metabolites");
		p1[13].setParameterValue("Metabolite_A=> <1.0, 1.0>");
		p1[14] = new Properties();
		p1[14].setParameterName("inflammatory");
		p1[14].setParameterValue("true");
		p1[15] = new Properties();
		p1[15].setParameterName("pDegrade");
		p1[15].setParameterValue("0.0");
		f1[0]= new Factor();
		f1[0].setFactorName("LPS");
		f1[0].setFactorProperties(p1);
		
		Properties p2[] = new Properties[100];
		p2[0] = new Properties();
		p2[0].setParameterName("tag");
		p2[0].setParameterValue("TOL");
		p2[1] = new Properties();
		p2[1].setParameterName("bolusRatio");
		p2[1].setParameterValue("0.0");
		p2[2] = new Properties();
		p2[2].setParameterName("pExitMedia");
		p2[2].setParameterValue("0.001");
		p2[3] = new Properties();
		p2[3].setParameterName("Bindable");
		p2[3].setParameterValue("true");
		p2[4] = new Properties();
		p2[4].setParameterName("pExitCell");
		p2[4].setParameterValue("1.0");
		p2[5] = new Properties();
		p2[5].setParameterName("bindProb");
		p2[5].setParameterValue("0.2");
		p2[6] = new Properties();
		p2[6].setParameterName("bindCycles");
		p2[6].setParameterValue("2");
		p2[7] = new Properties();
		p2[7].setParameterName("numProps");
		p2[7].setParameterValue("6");
		p2[8] = new Properties();
		p2[8].setParameterName("membraneCrossing");
		p2[8].setParameterValue("true");
		p2[9] = new Properties();
		p2[9].setParameterName("bileRatio");
		p2[9].setParameterValue("0.5");
		p2[10] = new Properties();
		p2[10].setParameterName("core2Rim");
		p2[10].setParameterValue("0.50");
		p2[11] = new Properties();
		p2[11].setParameterName("metProbStart");
		p2[11].setParameterValue("0.2");
		p2[12] = new Properties();
		p2[12].setParameterName("metProbFinish");
		p2[12].setParameterValue("0.2");
		p2[13] = new Properties();
		p2[13].setParameterName("metabolites");
		p2[13].setParameterValue("Metabolite_B=> <1.0, 1.0>");
		f1[1] =new Factor();
		f1[1].setFactorName("TOL");
		f1[1].setFactorProperties(p2);
		
		Properties p3[] = new Properties[100];
		p3[0] = new Properties();
		p3[0].setParameterName("tag");
		p3[0].setParameterValue("DZ");
		p3[1] = new Properties();
		p3[1].setParameterName("bolusRatio");
		p3[1].setParameterValue("0.0");
		p3[2] = new Properties();
		p3[2].setParameterName("pExitMedia");
		p3[2].setParameterValue("0.05");
		p3[3] = new Properties();
		p3[3].setParameterName("Bindable");
		p3[3].setParameterValue("true");
		p3[4] = new Properties();
		p3[4].setParameterName("pExitCell");
		p3[4].setParameterValue("1.0");
		p3[5] = new Properties();
		p3[5].setParameterName("bindProb");
		p3[5].setParameterValue("0.5");
		p3[6] = new Properties();
		p3[6].setParameterName("bindCycles");
		p3[6].setParameterValue("2");
		p3[7] = new Properties();
		p3[7].setParameterName("numProps");
		p3[7].setParameterValue("6");
		p3[8] = new Properties();
		p3[8].setParameterName("membraneCrossing");
		p3[8].setParameterValue("true");
		p3[9] = new Properties();
		p3[9].setParameterName("bileRatio");
		p3[9].setParameterValue("0.5");
		p3[10] = new Properties();
		p3[10].setParameterName("core2Rim");
		p3[10].setParameterValue("0.50");
		p3[11] = new Properties();
		p3[11].setParameterName("metProbStart");
		p3[11].setParameterValue("0.5");
		p3[12] = new Properties();
		p3[12].setParameterName("metProbFinish");
		p3[12].setParameterValue("0.5");
		p3[13] = new Properties();
		p3[13].setParameterName("metabolites");
		p3[13].setParameterValue("Metabolite_N=> <1.0, 1.0>");
		f1[2] = new Factor();
		f1[2].setFactorName("DZ");
		f1[2].setFactorProperties(p3);

		Properties p4[] = new Properties[100];
		p4[0] = new Properties();
		p4[0].setParameterName("tag");
		p4[0].setParameterValue("Cytokine");
		p4[1] = new Properties();
		p4[1].setParameterName("bolusRatio");
		p4[1].setParameterValue("0.0");
		p4[2] = new Properties();
		p4[2].setParameterName("pExitMedia");
		p4[2].setParameterValue("0.02");
		p4[3] = new Properties();
		p4[3].setParameterName("Bindable");
		p4[3].setParameterValue("false");
		p4[4] = new Properties();
		p4[4].setParameterName("pExitCell");
		p4[4].setParameterValue("0.0");
		p4[5] = new Properties();
		p4[5].setParameterName("bindProb");
		p4[5].setParameterValue("0.0");
		p4[6] = new Properties();
		p4[6].setParameterName("bindCycles");
		p4[6].setParameterValue("1");
		p4[7] = new Properties();
		p4[7].setParameterName("numProps");
		p4[7].setParameterValue("2");
		p4[8] = new Properties();
		p4[8].setParameterName("membraneCrossing");
		p4[8].setParameterValue("true");
		p4[9] = new Properties();
		p4[9].setParameterName("pDegrade");
		p4[9].setParameterValue("0.1");
		f1[3] = new Factor();
		f1[3].setFactorName("Cytokine");
		f1[3].setFactorProperties(p4);
		
		Properties p5[] = new Properties[100];
		p5[0] = new Properties();
		p5[0].setParameterName("tag");
		p5[0].setParameterValue("Metabolite_A");
		p5[1] = new Properties();
		p5[1].setParameterName("bolusRatio");
		p5[1].setParameterValue("0.0");
		p5[2] = new Properties();
		p5[2].setParameterName("pExitMedia");
		p5[2].setParameterValue("0.0");
		p5[3] = new Properties();
		p5[3].setParameterName("Bindable");
		p5[3].setParameterValue("false");
		p5[4] = new Properties();
		p5[4].setParameterName("pExitCell");
		p5[4].setParameterValue("0.0");
		p5[5] = new Properties();
		p5[5].setParameterName("bindProb");
		p5[5].setParameterValue("0.0");
		p5[6] = new Properties();
		p5[6].setParameterName("bindCycles");
		p5[6].setParameterValue("2");
		p5[7] = new Properties();
		p5[7].setParameterName("numProps");
		p5[7].setParameterValue("4");
		p5[8] = new Properties();
		p5[8].setParameterName("membraneCrossing");
		p5[8].setParameterValue("false");
		p5[9] = new Properties();
		p5[9].setParameterName("bileRatio");
		p5[9].setParameterValue("0.5");
		p5[10] = new Properties();
		p5[10].setParameterName("core2Rim");
		p5[10].setParameterValue("0.50");
		p5[11] = new Properties();
		p5[11].setParameterName("transportOut");
		p5[11].setParameterValue("true");
		f1[4]= new Factor();
		f1[4].setFactorName("Metabolite_A");
		f1[4].setFactorProperties(p5);
		
		Properties p6[] = new Properties[100];
		p6[0] = new Properties();
		p6[0].setParameterName("tag");
		p6[0].setParameterValue("Metabolite_B");
		p6[1] = new Properties();
		p6[1].setParameterName("bolusRatio");
		p6[1].setParameterValue("0.0");
		p6[2] = new Properties();
		p6[2].setParameterName("pExitMedia");
		p6[2].setParameterValue("0.0");
		p6[3] = new Properties();
		p6[3].setParameterName("Bindable");
		p6[3].setParameterValue("false");
		p6[4] = new Properties();
		p6[4].setParameterName("pExitCell");
		p6[4].setParameterValue("0.0");
		p6[5] = new Properties();
		p6[5].setParameterName("bindProb");
		p6[5].setParameterValue("0.0");
		p6[6] = new Properties();
		p6[6].setParameterName("bindCycles");
		p6[6].setParameterValue("2");
		p6[7] = new Properties();
		p6[7].setParameterName("numProps");
		p6[7].setParameterValue("4");
		p6[8] = new Properties();
		p6[8].setParameterName("membraneCrossing");
		p6[8].setParameterValue("false");
		p6[9] = new Properties();
		p6[9].setParameterName("bileRatio");
		p6[9].setParameterValue("0.5");
		p6[10] = new Properties();
		p6[10].setParameterName("core2Rim");
		p6[10].setParameterValue("0.50");
		p6[11] = new Properties();
		p6[11].setParameterName("transportOut");
		p6[11].setParameterValue("true");
		f1[5] = new Factor();
		f1[5].setFactorName("Metabolite_B");
		f1[5].setFactorProperties(p6);
		
		
		Properties p7[] = new Properties[100];
		p7[0] = new Properties();
		p7[0].setParameterName("tag");
		p7[0].setParameterValue("Metabolite_N");
		p7[1] = new Properties();
		p7[1].setParameterName("bolusRatio");
		p7[1].setParameterValue("0.0");
		p7[2] = new Properties();
		p7[2].setParameterName("pExitMedia");
		p7[2].setParameterValue("0.0");
		p7[3] = new Properties();
		p7[3].setParameterName("Bindable");
		p7[3].setParameterValue("false");
		p7[4] = new Properties();
		p7[4].setParameterName("pExitCell");
		p7[4].setParameterValue("0.0");
		p7[5] = new Properties();
		p7[5].setParameterName("bindProb");
		p7[5].setParameterValue("0.0");
		p7[6] = new Properties();
		p7[6].setParameterName("bindCycles");
		p7[6].setParameterValue("2");
		p7[7] = new Properties();
		p7[7].setParameterName("numProps");
		p7[7].setParameterValue("4");
		p7[8] = new Properties();
		p7[8].setParameterName("membraneCrossing");
		p7[8].setParameterValue("false");
		p7[9] = new Properties();
		p7[9].setParameterName("bileRatio");
		p7[9].setParameterValue("0.0");
		p7[10] = new Properties();
		p7[10].setParameterName("core2Rim");
		p7[10].setParameterValue("0.50");
		p7[11] = new Properties();
		p7[11].setParameterName("transportOut");
		p7[11].setParameterValue("true");
		p7[12] = new Properties();
		f1[6] = new Factor();
		f1[6].setFactorName("Metabolite_N");
		f1[6].setFactorProperties(p7);
		
		f1[7] = new Factor();
		f1[7].setFactorName("forwardBias");
		Values v = new Values(0.5);
		f1[7].setFactorValues("0.5");
		f1[8] = new Factor();
		f1[8].setFactorName("lateralBias");
		v = new Values(0.5);
		f1[8].setFactorValues("0.5");
		f1[9] = new Factor();
		f1[9].setFactorName("mediaScale ");
		v = new Values(1000);
		f1[9].setFactorValues("1000");
		f1[10] = new Factor();
		f1[10].setFactorName("hepDensity ");
		v = new Values(0.0);
		f1[10].setFactorValues("0.0");
		f1[11] = new Factor();
		f1[11].setFactorName("KCDensity ");
		v = new Values(0.9);
		f1[11].setFactorValues("0.9");
		f1[12] = new Factor();
		f1[12].setFactorName("bindersPerCellMin ");
		v = new Values(4);
		f1[12].setFactorValues("4");
		f1[13] = new Factor();
		f1[13].setFactorName("bindersPerCellMax ");
		v = new Values(8);
		f1[13].setFactorValues("8");
		f1[14] = new Factor();
		f1[14].setFactorName("eiThresh ");
		v = new Values(1);
		f1[14].setFactorValues("1");
		f1[15] = new Factor();
		f1[15].setFactorName("eiRate ");
		v = new Values(0.05);
		f1[15].setFactorValues("0.05");
		f1[16] = new Factor();
		f1[16].setFactorName("eiResponse ");
		v = new Values(0.25);
		f1[16].setFactorValues("0.25");
		f1[17] = new Factor();
		f1[17].setFactorName("elThresh ");
		v = new Values(1);
		f1[17].setFactorValues("1");
		f1[18] = new Factor();
		f1[18].setFactorName("elRate ");
		v = new Values(0.05);
		f1[18].setFactorValues("0.05");
		f1[19] = new Factor();
		f1[19].setFactorName("elResponse ");
		v = new Values(0.25);
		f1[19].setFactorValues("0.25");
		f1[20] = new Factor();
		f1[20].setFactorName("scale ");
		v = new Values(1000000);
		f1[20].setFactorValues("1000000");
		f1[21] = new Factor();
		f1[21].setFactorName("inflammatoryStimulusThreshold ");
		v = new Values(0);
		f1[21].setFactorValues("0");
		f1[22] = new Factor();
		f1[22].setFactorName("cytokineThreshold ");
		v = new Values(3);
		f1[22].setFactorValues("3");
		f1[23] = new Factor();
		f1[23].setFactorName("exponentialFactor ");
		v = new Values(2);
		f1[23].setFactorValues("2");
		f1[24] = new Factor();
		f1[24].setFactorName("drReplenish  ");
		v = new Values(0.005);
		f1[24].setFactorValues("0.005");
		f1[25] = new Factor();
		f1[25].setFactorName("drRemove  ");
		v = new Values(0.015);
		f1[25].setFactorValues("0.015");
		f1[26] = new Factor();
		f1[26].setFactorName("drRate");
		v = new Values(30);
		f1[26].setFactorValues("30");
		
		Mechanism mech[] = new Mechanism[100];
		//OtherAgent oa = new OtherAgent("KupfferCells");
		Reaction lhs1 = new Reaction("inflammatoryAgent", "KupfferCells");
		LinkOperators lo1 = new LinkOperators(">");
		GuardCondition guardCondition1 = new GuardCondition("InflammatoryAgent", 
				"inflammatorythreshold", lo1);
		Reaction rhs1 = new Reaction("Cytokine");
		
		mech[0] = new Mechanism("M1", rhs1, lhs1, guardCondition1);
		
		//oa = new OtherAgent("KupfferCells");
		Reaction lhs2 = new Reaction("inflammatoryAgent", "KupfferCells");
		LinkOperators lo2 = new LinkOperators("<");
		GuardCondition guardCondition2 = new GuardCondition("noOfCytokines", 
				"cytokinethreshold", lo2);
		Reaction rhs2 = new Reaction("Cytokine");
		
		mech[1] = new Mechanism("M1", rhs2, lhs2, guardCondition2);
		
		Events e = new Events("inflammation", "void ishc.model.KupfferCell.handleInflammation()");
		
		
		ModelSection ms = new ModelSection("ISHC", mech, e, f1);
		Goals goal = new Goals();
		goal.setObjectOfStudy("Immune system influence on hepatic cytochrome P450 regulation");
		goal.setPurpose("Explain/Characterize");
		goal.setFocus("the reason for changes in downstream drug metabolism and hepatotoxicity");
		goal.setViewPoint("based on the response of hepatic cytochrome P450- regulating mechanisms");
		goal.setContext("when health and/or therapeutic interventions change.");
		
		Hypothesis hypothesis = new Hypothesis();
		
		Query query = new Query("M1 precedes M2");
		Evidences assoMech = new Evidences(query);
		MechanisticHypothesis mh[] = new MechanisticHypothesis[100];
		mh[0] = new MechanisticHypothesis();
		mh[0].setmName("H3");
		mh[0].setAssoMech(assoMech);
	
		Evidences evi[] = new Evidences[100];
		evi[0] = new Evidences();
		evi[1] = new Evidences();
		query = new Query("inflammatoryAgent > inflammatoryAgentThreshold leads to inflammation ");
		evi[0].seteName("E1");
		evi[0].setQ(query);
		query = new Query("inflammatoryAgent > inflammatoryAgentThreshold leads to inflammation");
		evi[1].seteName("E2");
		evi[1].setQ(query);
		
		Coherence coherence[] = new Coherence[100];
		coherence[0] = new Coherence();
		coherence[0].setCt(CoherenceType.EXPLAIN);
		coherence[0].setE("E1");
		coherence[0].setH("H1");
		hypothesis.setMechHypothesis(mh);
		hypothesis.setEvid(evi);
		hypothesis.setcModel(coherence);
		
		FactorLevels f[] = new FactorLevels[100];
		f[0] = new FactorLevels();
		f[0].setFacName("LPS");
		f[0].setL1(FactorLevels.Levels.LOW);
		f[0].setStart1(0);
		f[0].setEnd1(0.1);
		IndependentVariables i = new IndependentVariables(f);
		Response r = new Response("Cytokine", Response.RTypes.SIMPLE);
		DependentVariables d = new DependentVariables(r);
		Variables variables = new Variables(i, d) ;
		Design expDesign = new Design(Design.Types.OTHERS, variables);
		Experiment exp = new Experiment("Experiment1", expDesign);
		
		PerformanceMeasure pm = new PerformanceMeasure(r, 10, 500);
		exp.setPerfMeasure(pm);
		ConvertToLTL cLTL = new ConvertToLTL();
		cLTL.convert(query);
		ToDeliveryProperties delivery = new ToDeliveryProperties();
		delivery.convertToProperties(ms);
		ToISHCProperties ishc = new ToISHCProperties();
		ishc.convertToProperties(ms);
		ExptExecuter ee = new ExptExecuter();
		ee.start();
		System.out.print("Finished");
	}

}
